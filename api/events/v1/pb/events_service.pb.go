// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: events_service.proto

package eventsv1pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddPupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pupils to be added
	Pupils []*AddPupilsRequest_Pupil `protobuf:"bytes,1,rep,name=pupils,proto3" json:"pupils,omitempty"`
}

func (x *AddPupilsRequest) Reset() {
	*x = AddPupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPupilsRequest) ProtoMessage() {}

func (x *AddPupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPupilsRequest.ProtoReflect.Descriptor instead.
func (*AddPupilsRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddPupilsRequest) GetPupils() []*AddPupilsRequest_Pupil {
	if x != nil {
		return x.Pupils
	}
	return nil
}

type AddPupilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ids of the pupils added
	PupilIds []string `protobuf:"bytes,1,rep,name=pupil_ids,json=pupilIds,proto3" json:"pupil_ids,omitempty"`
}

func (x *AddPupilsResponse) Reset() {
	*x = AddPupilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPupilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPupilsResponse) ProtoMessage() {}

func (x *AddPupilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPupilsResponse.ProtoReflect.Descriptor instead.
func (*AddPupilsResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddPupilsResponse) GetPupilIds() []string {
	if x != nil {
		return x.PupilIds
	}
	return nil
}

type ChangePupilClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PupilId string `protobuf:"bytes,1,opt,name=pupil_id,json=pupilId,proto3" json:"pupil_id,omitempty"`
	// class name as it is now (class name changes depending on the date)
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *ChangePupilClassRequest) Reset() {
	*x = ChangePupilClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePupilClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePupilClassRequest) ProtoMessage() {}

func (x *ChangePupilClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePupilClassRequest.ProtoReflect.Descriptor instead.
func (*ChangePupilClassRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{2}
}

func (x *ChangePupilClassRequest) GetPupilId() string {
	if x != nil {
		return x.PupilId
	}
	return ""
}

func (x *ChangePupilClassRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type ChangePupilResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PupilId string `protobuf:"bytes,2,opt,name=pupil_id,json=pupilId,proto3" json:"pupil_id,omitempty"`
	// amount of resources brought by the pupil to the event
	ResourcesBrought *ResourcesBrought `protobuf:"bytes,3,opt,name=resources_brought,json=resourcesBrought,proto3" json:"resources_brought,omitempty"`
}

func (x *ChangePupilResourcesRequest) Reset() {
	*x = ChangePupilResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePupilResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePupilResourcesRequest) ProtoMessage() {}

func (x *ChangePupilResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePupilResourcesRequest.ProtoReflect.Descriptor instead.
func (*ChangePupilResourcesRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{3}
}

func (x *ChangePupilResourcesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ChangePupilResourcesRequest) GetPupilId() string {
	if x != nil {
		return x.PupilId
	}
	return ""
}

func (x *ChangePupilResourcesRequest) GetResourcesBrought() *ResourcesBrought {
	if x != nil {
		return x.ResourcesBrought
	}
	return nil
}

type CreateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event date
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Name string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// resources permitted on the event
	ResourcesAllowed []Resource `protobuf:"varint,3,rep,packed,name=resources_allowed,json=resourcesAllowed,proto3,enum=shanvl.garbage.events.v1.Resource" json:"resources_allowed,omitempty"`
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEventRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetResourcesAllowed() []Resource {
	if x != nil {
		return x.ResourcesAllowed
	}
	return nil
}

type CreateEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEventResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEventRequest) Reset() {
	*x = DeleteEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventRequest) ProtoMessage() {}

func (x *DeleteEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Note, that we can't use the class name here because it changes depending on the event's date. So the class' letter
// the date it was formed on used instead
type FindClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// letter of the class
	Letter string `protobuf:"bytes,1,opt,name=letter,proto3" json:"letter,omitempty"`
	// date the class was formed on
	DateFormed   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_formed,json=dateFormed,proto3" json:"date_formed,omitempty"`
	EventFilters *EventFilters        `protobuf:"bytes,3,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	Sorting      ClassSorting         `protobuf:"varint,4,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.ClassSorting" json:"sorting,omitempty"`
	EventSorting EventSorting         `protobuf:"varint,5,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
	Amount       uint32               `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32               `protobuf:"varint,7,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindClassesRequest) Reset() {
	*x = FindClassesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindClassesRequest) ProtoMessage() {}

func (x *FindClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindClassesRequest.ProtoReflect.Descriptor instead.
func (*FindClassesRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{7}
}

func (x *FindClassesRequest) GetLetter() string {
	if x != nil {
		return x.Letter
	}
	return ""
}

func (x *FindClassesRequest) GetDateFormed() *timestamp.Timestamp {
	if x != nil {
		return x.DateFormed
	}
	return nil
}

func (x *FindClassesRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindClassesRequest) GetSorting() ClassSorting {
	if x != nil {
		return x.Sorting
	}
	return ClassSorting_CLASS_SORTING_UNKNOWN
}

func (x *FindClassesRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindClassesRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindClassesRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of classes with aggregated info about the resources a class has brought to every event that
	// passed the filters and a list of those events for each class
	Classes []*ClassAggr `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	// total classes found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindClassesResponse) Reset() {
	*x = FindClassesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindClassesResponse) ProtoMessage() {}

func (x *FindClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindClassesResponse.ProtoReflect.Descriptor instead.
func (*FindClassesResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{8}
}

func (x *FindClassesResponse) GetClasses() []*ClassAggr {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *FindClassesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *EventFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Sorting EventSorting  `protobuf:"varint,2,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"sorting,omitempty"`
	Amount  uint32        `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip    uint32        `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventsRequest) Reset() {
	*x = FindEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventsRequest) ProtoMessage() {}

func (x *FindEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventsRequest.ProtoReflect.Descriptor instead.
func (*FindEventsRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{9}
}

func (x *FindEventsRequest) GetFilters() *EventFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FindEventsRequest) GetSorting() EventSorting {
	if x != nil {
		return x.Sorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindEventsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of the events that passed the provided filters
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// total events found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventsResponse) Reset() {
	*x = FindEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventsResponse) ProtoMessage() {}

func (x *FindEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventsResponse.ProtoReflect.Descriptor instead.
func (*FindEventsResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{10}
}

func (x *FindEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *FindEventsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindPupilByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventFilters *EventFilters `protobuf:"bytes,2,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	EventSorting EventSorting  `protobuf:"varint,3,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
}

func (x *FindPupilByIDRequest) Reset() {
	*x = FindPupilByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilByIDRequest) ProtoMessage() {}

func (x *FindPupilByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilByIDRequest.ProtoReflect.Descriptor instead.
func (*FindPupilByIDRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{11}
}

func (x *FindPupilByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindPupilByIDRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindPupilByIDRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

type FindPupilByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pupil with aggregated info about the resources the pupil brought to every event that
	// passed the filters and a list of those events
	Pupil *PupilAggr `protobuf:"bytes,1,opt,name=pupil,proto3" json:"pupil,omitempty"`
}

func (x *FindPupilByIDResponse) Reset() {
	*x = FindPupilByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilByIDResponse) ProtoMessage() {}

func (x *FindPupilByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilByIDResponse.ProtoReflect.Descriptor instead.
func (*FindPupilByIDResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{12}
}

func (x *FindPupilByIDResponse) GetPupil() *PupilAggr {
	if x != nil {
		return x.Pupil
	}
	return nil
}

type FindPupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text search field that can be a combination of the name of a pupil and the name of their class
	NameAndClass string        `protobuf:"bytes,1,opt,name=name_and_class,json=nameAndClass,proto3" json:"name_and_class,omitempty"`
	EventFilters *EventFilters `protobuf:"bytes,2,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	Sorting      PupilSorting  `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.PupilSorting" json:"sorting,omitempty"`
	EventSorting EventSorting  `protobuf:"varint,4,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
	Amount       uint32        `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32        `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindPupilsRequest) Reset() {
	*x = FindPupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilsRequest) ProtoMessage() {}

func (x *FindPupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilsRequest.ProtoReflect.Descriptor instead.
func (*FindPupilsRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{13}
}

func (x *FindPupilsRequest) GetNameAndClass() string {
	if x != nil {
		return x.NameAndClass
	}
	return ""
}

func (x *FindPupilsRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindPupilsRequest) GetSorting() PupilSorting {
	if x != nil {
		return x.Sorting
	}
	return PupilSorting_PUPIL_SORTING_UNKNOWN
}

func (x *FindPupilsRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindPupilsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindPupilsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindPupilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of pupils with aggregated info about the resources a pupil has brought to every event that
	// passed the filters and a list of those events for each pupil
	Pupils []*PupilAggr `protobuf:"bytes,1,rep,name=pupils,proto3" json:"pupils,omitempty"`
	// total pupils found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindPupilsResponse) Reset() {
	*x = FindPupilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilsResponse) ProtoMessage() {}

func (x *FindPupilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilsResponse.ProtoReflect.Descriptor instead.
func (*FindPupilsResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{14}
}

func (x *FindPupilsResponse) GetPupils() []*PupilAggr {
	if x != nil {
		return x.Pupils
	}
	return nil
}

func (x *FindPupilsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindEventByIDRequest) Reset() {
	*x = FindEventByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventByIDRequest) ProtoMessage() {}

func (x *FindEventByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventByIDRequest.ProtoReflect.Descriptor instead.
func (*FindEventByIDRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{15}
}

func (x *FindEventByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindEventByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event's info with the resources collected on that event
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *FindEventByIDResponse) Reset() {
	*x = FindEventByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventByIDResponse) ProtoMessage() {}

func (x *FindEventByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventByIDResponse.ProtoReflect.Descriptor instead.
func (*FindEventByIDResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{16}
}

func (x *FindEventByIDResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type FindEventClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// text search field with a class name as it was on the date of the event (class name changes depending on the
	// event's date)
	ClassName string       `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Sorting   ClassSorting `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.ClassSorting" json:"sorting,omitempty"`
	Amount    uint32       `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip      uint32       `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventClassesRequest) Reset() {
	*x = FindEventClassesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventClassesRequest) ProtoMessage() {}

func (x *FindEventClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventClassesRequest.ProtoReflect.Descriptor instead.
func (*FindEventClassesRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{17}
}

func (x *FindEventClassesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventClassesRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FindEventClassesRequest) GetSorting() ClassSorting {
	if x != nil {
		return x.Sorting
	}
	return ClassSorting_CLASS_SORTING_UNKNOWN
}

func (x *FindEventClassesRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventClassesRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of found classes with the resources each class brought to the event
	Classes []*Class `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	// total classes found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventClassesResponse) Reset() {
	*x = FindEventClassesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventClassesResponse) ProtoMessage() {}

func (x *FindEventClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventClassesResponse.ProtoReflect.Descriptor instead.
func (*FindEventClassesResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{18}
}

func (x *FindEventClassesResponse) GetClasses() []*Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *FindEventClassesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventPupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// text search field with the combination of pupils names and classes names as they were on the date of the event
	// (class name changes depending on the event's date)
	NameAndClass string       `protobuf:"bytes,2,opt,name=name_and_class,json=nameAndClass,proto3" json:"name_and_class,omitempty"`
	Sorting      PupilSorting `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.PupilSorting" json:"sorting,omitempty"`
	Amount       uint32       `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32       `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventPupilsRequest) Reset() {
	*x = FindEventPupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilsRequest) ProtoMessage() {}

func (x *FindEventPupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilsRequest.ProtoReflect.Descriptor instead.
func (*FindEventPupilsRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{19}
}

func (x *FindEventPupilsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventPupilsRequest) GetNameAndClass() string {
	if x != nil {
		return x.NameAndClass
	}
	return ""
}

func (x *FindEventPupilsRequest) GetSorting() PupilSorting {
	if x != nil {
		return x.Sorting
	}
	return PupilSorting_PUPIL_SORTING_UNKNOWN
}

func (x *FindEventPupilsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventPupilsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventPupilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of found pupils with the resources each pupil brought to the event
	Pupils []*Pupil `protobuf:"bytes,1,rep,name=pupils,proto3" json:"pupils,omitempty"`
	// total pupils found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventPupilsResponse) Reset() {
	*x = FindEventPupilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilsResponse) ProtoMessage() {}

func (x *FindEventPupilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilsResponse.ProtoReflect.Descriptor instead.
func (*FindEventPupilsResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{20}
}

func (x *FindEventPupilsResponse) GetPupils() []*Pupil {
	if x != nil {
		return x.Pupils
	}
	return nil
}

func (x *FindEventPupilsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventPupilByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PupilId string `protobuf:"bytes,2,opt,name=pupil_id,json=pupilId,proto3" json:"pupil_id,omitempty"`
}

func (x *FindEventPupilByIDRequest) Reset() {
	*x = FindEventPupilByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilByIDRequest) ProtoMessage() {}

func (x *FindEventPupilByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilByIDRequest.ProtoReflect.Descriptor instead.
func (*FindEventPupilByIDRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{21}
}

func (x *FindEventPupilByIDRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventPupilByIDRequest) GetPupilId() string {
	if x != nil {
		return x.PupilId
	}
	return ""
}

type FindEventPupilByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pupil info with the resources they brought to the event
	Pupil *Pupil `protobuf:"bytes,1,opt,name=pupil,proto3" json:"pupil,omitempty"`
}

func (x *FindEventPupilByIDResponse) Reset() {
	*x = FindEventPupilByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilByIDResponse) ProtoMessage() {}

func (x *FindEventPupilByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilByIDResponse.ProtoReflect.Descriptor instead.
func (*FindEventPupilByIDResponse) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{22}
}

func (x *FindEventPupilByIDResponse) GetPupil() *Pupil {
	if x != nil {
		return x.Pupil
	}
	return nil
}

type RemovePupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ids of the pupils deleted
	PupilIds []string `protobuf:"bytes,1,rep,name=pupil_ids,json=pupilIds,proto3" json:"pupil_ids,omitempty"`
}

func (x *RemovePupilsRequest) Reset() {
	*x = RemovePupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePupilsRequest) ProtoMessage() {}

func (x *RemovePupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePupilsRequest.ProtoReflect.Descriptor instead.
func (*RemovePupilsRequest) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{23}
}

func (x *RemovePupilsRequest) GetPupilIds() []string {
	if x != nil {
		return x.PupilIds
	}
	return nil
}

type AddPupilsRequest_Pupil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// class name as it is now (class name changes depending on the date)
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *AddPupilsRequest_Pupil) Reset() {
	*x = AddPupilsRequest_Pupil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPupilsRequest_Pupil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPupilsRequest_Pupil) ProtoMessage() {}

func (x *AddPupilsRequest_Pupil) ProtoReflect() protoreflect.Message {
	mi := &file_events_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPupilsRequest_Pupil.ProtoReflect.Descriptor instead.
func (*AddPupilsRequest_Pupil) Descriptor() ([]byte, []int) {
	return file_events_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AddPupilsRequest_Pupil) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AddPupilsRequest_Pupil) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AddPupilsRequest_Pupil) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

var File_events_service_proto protoreflect.FileDescriptor

var file_events_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75,
	0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x70, 0x69,
	0x6c, 0x52, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x1a, 0x59, 0x0a, 0x05, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75,
	0x70, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x25, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x6a,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x67, 0x67, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x22, 0x63, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75,
	0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69,
	0x6c, 0x41, 0x67, 0x67, 0x72, 0x52, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x22, 0xc1, 0x02, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x22, 0x67, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x52, 0x06, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x26, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4e, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e,
	0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x6b, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x68, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x51, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x22, 0x32,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x49,
	0x64, 0x73, 0x32, 0x8e, 0x0f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x12, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x70, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x7f, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75,
	0x70, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x73, 0x68,
	0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73,
	0x2f, 0x7b, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x81,
	0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7f, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x89,
	0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x2e, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x31, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x9c, 0x01,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x12, 0x30, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0xb0, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75,
	0x70, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x89, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x2e, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x0a, 0x46,
	0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x6e,
	0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x73, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x76,
	0x31, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_service_proto_rawDescOnce sync.Once
	file_events_service_proto_rawDescData = file_events_service_proto_rawDesc
)

func file_events_service_proto_rawDescGZIP() []byte {
	file_events_service_proto_rawDescOnce.Do(func() {
		file_events_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_service_proto_rawDescData)
	})
	return file_events_service_proto_rawDescData
}

var file_events_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_events_service_proto_goTypes = []interface{}{
	(*AddPupilsRequest)(nil),            // 0: shanvl.garbage.events.v1.AddPupilsRequest
	(*AddPupilsResponse)(nil),           // 1: shanvl.garbage.events.v1.AddPupilsResponse
	(*ChangePupilClassRequest)(nil),     // 2: shanvl.garbage.events.v1.ChangePupilClassRequest
	(*ChangePupilResourcesRequest)(nil), // 3: shanvl.garbage.events.v1.ChangePupilResourcesRequest
	(*CreateEventRequest)(nil),          // 4: shanvl.garbage.events.v1.CreateEventRequest
	(*CreateEventResponse)(nil),         // 5: shanvl.garbage.events.v1.CreateEventResponse
	(*DeleteEventRequest)(nil),          // 6: shanvl.garbage.events.v1.DeleteEventRequest
	(*FindClassesRequest)(nil),          // 7: shanvl.garbage.events.v1.FindClassesRequest
	(*FindClassesResponse)(nil),         // 8: shanvl.garbage.events.v1.FindClassesResponse
	(*FindEventsRequest)(nil),           // 9: shanvl.garbage.events.v1.FindEventsRequest
	(*FindEventsResponse)(nil),          // 10: shanvl.garbage.events.v1.FindEventsResponse
	(*FindPupilByIDRequest)(nil),        // 11: shanvl.garbage.events.v1.FindPupilByIDRequest
	(*FindPupilByIDResponse)(nil),       // 12: shanvl.garbage.events.v1.FindPupilByIDResponse
	(*FindPupilsRequest)(nil),           // 13: shanvl.garbage.events.v1.FindPupilsRequest
	(*FindPupilsResponse)(nil),          // 14: shanvl.garbage.events.v1.FindPupilsResponse
	(*FindEventByIDRequest)(nil),        // 15: shanvl.garbage.events.v1.FindEventByIDRequest
	(*FindEventByIDResponse)(nil),       // 16: shanvl.garbage.events.v1.FindEventByIDResponse
	(*FindEventClassesRequest)(nil),     // 17: shanvl.garbage.events.v1.FindEventClassesRequest
	(*FindEventClassesResponse)(nil),    // 18: shanvl.garbage.events.v1.FindEventClassesResponse
	(*FindEventPupilsRequest)(nil),      // 19: shanvl.garbage.events.v1.FindEventPupilsRequest
	(*FindEventPupilsResponse)(nil),     // 20: shanvl.garbage.events.v1.FindEventPupilsResponse
	(*FindEventPupilByIDRequest)(nil),   // 21: shanvl.garbage.events.v1.FindEventPupilByIDRequest
	(*FindEventPupilByIDResponse)(nil),  // 22: shanvl.garbage.events.v1.FindEventPupilByIDResponse
	(*RemovePupilsRequest)(nil),         // 23: shanvl.garbage.events.v1.RemovePupilsRequest
	(*AddPupilsRequest_Pupil)(nil),      // 24: shanvl.garbage.events.v1.AddPupilsRequest.Pupil
	(*ResourcesBrought)(nil),            // 25: shanvl.garbage.events.v1.ResourcesBrought
	(*timestamp.Timestamp)(nil),         // 26: google.protobuf.Timestamp
	(Resource)(0),                       // 27: shanvl.garbage.events.v1.Resource
	(*EventFilters)(nil),                // 28: shanvl.garbage.events.v1.EventFilters
	(ClassSorting)(0),                   // 29: shanvl.garbage.events.v1.ClassSorting
	(EventSorting)(0),                   // 30: shanvl.garbage.events.v1.EventSorting
	(*ClassAggr)(nil),                   // 31: shanvl.garbage.events.v1.ClassAggr
	(*Event)(nil),                       // 32: shanvl.garbage.events.v1.Event
	(*PupilAggr)(nil),                   // 33: shanvl.garbage.events.v1.PupilAggr
	(PupilSorting)(0),                   // 34: shanvl.garbage.events.v1.PupilSorting
	(*Class)(nil),                       // 35: shanvl.garbage.events.v1.Class
	(*Pupil)(nil),                       // 36: shanvl.garbage.events.v1.Pupil
	(*empty.Empty)(nil),                 // 37: google.protobuf.Empty
}
var file_events_service_proto_depIdxs = []int32{
	24, // 0: shanvl.garbage.events.v1.AddPupilsRequest.pupils:type_name -> shanvl.garbage.events.v1.AddPupilsRequest.Pupil
	25, // 1: shanvl.garbage.events.v1.ChangePupilResourcesRequest.resources_brought:type_name -> shanvl.garbage.events.v1.ResourcesBrought
	26, // 2: shanvl.garbage.events.v1.CreateEventRequest.date:type_name -> google.protobuf.Timestamp
	27, // 3: shanvl.garbage.events.v1.CreateEventRequest.resources_allowed:type_name -> shanvl.garbage.events.v1.Resource
	26, // 4: shanvl.garbage.events.v1.FindClassesRequest.date_formed:type_name -> google.protobuf.Timestamp
	28, // 5: shanvl.garbage.events.v1.FindClassesRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	29, // 6: shanvl.garbage.events.v1.FindClassesRequest.sorting:type_name -> shanvl.garbage.events.v1.ClassSorting
	30, // 7: shanvl.garbage.events.v1.FindClassesRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	31, // 8: shanvl.garbage.events.v1.FindClassesResponse.classes:type_name -> shanvl.garbage.events.v1.ClassAggr
	28, // 9: shanvl.garbage.events.v1.FindEventsRequest.filters:type_name -> shanvl.garbage.events.v1.EventFilters
	30, // 10: shanvl.garbage.events.v1.FindEventsRequest.sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	32, // 11: shanvl.garbage.events.v1.FindEventsResponse.events:type_name -> shanvl.garbage.events.v1.Event
	28, // 12: shanvl.garbage.events.v1.FindPupilByIDRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	30, // 13: shanvl.garbage.events.v1.FindPupilByIDRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	33, // 14: shanvl.garbage.events.v1.FindPupilByIDResponse.pupil:type_name -> shanvl.garbage.events.v1.PupilAggr
	28, // 15: shanvl.garbage.events.v1.FindPupilsRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	34, // 16: shanvl.garbage.events.v1.FindPupilsRequest.sorting:type_name -> shanvl.garbage.events.v1.PupilSorting
	30, // 17: shanvl.garbage.events.v1.FindPupilsRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	33, // 18: shanvl.garbage.events.v1.FindPupilsResponse.pupils:type_name -> shanvl.garbage.events.v1.PupilAggr
	32, // 19: shanvl.garbage.events.v1.FindEventByIDResponse.event:type_name -> shanvl.garbage.events.v1.Event
	29, // 20: shanvl.garbage.events.v1.FindEventClassesRequest.sorting:type_name -> shanvl.garbage.events.v1.ClassSorting
	35, // 21: shanvl.garbage.events.v1.FindEventClassesResponse.classes:type_name -> shanvl.garbage.events.v1.Class
	34, // 22: shanvl.garbage.events.v1.FindEventPupilsRequest.sorting:type_name -> shanvl.garbage.events.v1.PupilSorting
	36, // 23: shanvl.garbage.events.v1.FindEventPupilsResponse.pupils:type_name -> shanvl.garbage.events.v1.Pupil
	36, // 24: shanvl.garbage.events.v1.FindEventPupilByIDResponse.pupil:type_name -> shanvl.garbage.events.v1.Pupil
	0,  // 25: shanvl.garbage.events.v1.EventsService.AddPupils:input_type -> shanvl.garbage.events.v1.AddPupilsRequest
	2,  // 26: shanvl.garbage.events.v1.EventsService.ChangePupilClass:input_type -> shanvl.garbage.events.v1.ChangePupilClassRequest
	3,  // 27: shanvl.garbage.events.v1.EventsService.ChangePupilResources:input_type -> shanvl.garbage.events.v1.ChangePupilResourcesRequest
	4,  // 28: shanvl.garbage.events.v1.EventsService.CreateEvent:input_type -> shanvl.garbage.events.v1.CreateEventRequest
	6,  // 29: shanvl.garbage.events.v1.EventsService.DeleteEvent:input_type -> shanvl.garbage.events.v1.DeleteEventRequest
	7,  // 30: shanvl.garbage.events.v1.EventsService.FindClasses:input_type -> shanvl.garbage.events.v1.FindClassesRequest
	9,  // 31: shanvl.garbage.events.v1.EventsService.FindEvents:input_type -> shanvl.garbage.events.v1.FindEventsRequest
	15, // 32: shanvl.garbage.events.v1.EventsService.FindEventByID:input_type -> shanvl.garbage.events.v1.FindEventByIDRequest
	17, // 33: shanvl.garbage.events.v1.EventsService.FindEventClasses:input_type -> shanvl.garbage.events.v1.FindEventClassesRequest
	19, // 34: shanvl.garbage.events.v1.EventsService.FindEventPupils:input_type -> shanvl.garbage.events.v1.FindEventPupilsRequest
	21, // 35: shanvl.garbage.events.v1.EventsService.FindEventPupilByID:input_type -> shanvl.garbage.events.v1.FindEventPupilByIDRequest
	11, // 36: shanvl.garbage.events.v1.EventsService.FindPupilByID:input_type -> shanvl.garbage.events.v1.FindPupilByIDRequest
	13, // 37: shanvl.garbage.events.v1.EventsService.FindPupils:input_type -> shanvl.garbage.events.v1.FindPupilsRequest
	23, // 38: shanvl.garbage.events.v1.EventsService.RemovePupils:input_type -> shanvl.garbage.events.v1.RemovePupilsRequest
	1,  // 39: shanvl.garbage.events.v1.EventsService.AddPupils:output_type -> shanvl.garbage.events.v1.AddPupilsResponse
	37, // 40: shanvl.garbage.events.v1.EventsService.ChangePupilClass:output_type -> google.protobuf.Empty
	37, // 41: shanvl.garbage.events.v1.EventsService.ChangePupilResources:output_type -> google.protobuf.Empty
	5,  // 42: shanvl.garbage.events.v1.EventsService.CreateEvent:output_type -> shanvl.garbage.events.v1.CreateEventResponse
	37, // 43: shanvl.garbage.events.v1.EventsService.DeleteEvent:output_type -> google.protobuf.Empty
	8,  // 44: shanvl.garbage.events.v1.EventsService.FindClasses:output_type -> shanvl.garbage.events.v1.FindClassesResponse
	10, // 45: shanvl.garbage.events.v1.EventsService.FindEvents:output_type -> shanvl.garbage.events.v1.FindEventsResponse
	16, // 46: shanvl.garbage.events.v1.EventsService.FindEventByID:output_type -> shanvl.garbage.events.v1.FindEventByIDResponse
	18, // 47: shanvl.garbage.events.v1.EventsService.FindEventClasses:output_type -> shanvl.garbage.events.v1.FindEventClassesResponse
	20, // 48: shanvl.garbage.events.v1.EventsService.FindEventPupils:output_type -> shanvl.garbage.events.v1.FindEventPupilsResponse
	22, // 49: shanvl.garbage.events.v1.EventsService.FindEventPupilByID:output_type -> shanvl.garbage.events.v1.FindEventPupilByIDResponse
	12, // 50: shanvl.garbage.events.v1.EventsService.FindPupilByID:output_type -> shanvl.garbage.events.v1.FindPupilByIDResponse
	14, // 51: shanvl.garbage.events.v1.EventsService.FindPupils:output_type -> shanvl.garbage.events.v1.FindPupilsResponse
	37, // 52: shanvl.garbage.events.v1.EventsService.RemovePupils:output_type -> google.protobuf.Empty
	39, // [39:53] is the sub-list for method output_type
	25, // [25:39] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_events_service_proto_init() }
func file_events_service_proto_init() {
	if File_events_service_proto != nil {
		return
	}
	file_events_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_events_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPupilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePupilClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePupilResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindClassesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindClassesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventClassesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventClassesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPupilsRequest_Pupil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_events_service_proto_goTypes,
		DependencyIndexes: file_events_service_proto_depIdxs,
		MessageInfos:      file_events_service_proto_msgTypes,
	}.Build()
	File_events_service_proto = out.File
	file_events_service_proto_rawDesc = nil
	file_events_service_proto_goTypes = nil
	file_events_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsServiceClient interface {
	// AddPupils adds the given pupils and returns the ids of the added
	AddPupils(ctx context.Context, in *AddPupilsRequest, opts ...grpc.CallOption) (*AddPupilsResponse, error)
	// ChangePupilClass changes the class of the pupil
	ChangePupilClass(ctx context.Context, in *ChangePupilClassRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ChangePupilResources changes the amount of resources brought by the pupil to the event
	ChangePupilResources(ctx context.Context, in *ChangePupilResourcesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateEvent creates and stores the event
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	// DeleteEvent deletes the event
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// FindClasses returns a list of sorted classes, each of which has a list of events that passed the given filters
	FindClasses(ctx context.Context, in *FindClassesRequest, opts ...grpc.CallOption) (*FindClassesResponse, error)
	// FindEvents returns a list of sorted events that passed the provided filters
	FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsResponse, error)
	// FindEventByID returns an event with the given id and all resources collected at that event
	FindEventByID(ctx context.Context, in *FindEventByIDRequest, opts ...grpc.CallOption) (*FindEventByIDResponse, error)
	// FindEventClasses returns an array of sorted classes with the resources they brought to the specified event
	FindEventClasses(ctx context.Context, in *FindEventClassesRequest, opts ...grpc.CallOption) (*FindEventClassesResponse, error)
	// FindEventPupils returns an array of sorted pupils with the resources they brought to the specified event
	FindEventPupils(ctx context.Context, in *FindEventPupilsRequest, opts ...grpc.CallOption) (*FindEventPupilsResponse, error)
	// FindPupilByID returns a pupil with the given id with the resources they brought to that event
	FindEventPupilByID(ctx context.Context, in *FindEventPupilByIDRequest, opts ...grpc.CallOption) (*FindEventPupilByIDResponse, error)
	// FindPupilByID returns a pupil with the given ID and a list of events they has attended
	FindPupilByID(ctx context.Context, in *FindPupilByIDRequest, opts ...grpc.CallOption) (*FindPupilByIDResponse, error)
	// FindPupils returns a list of sorted classes, each of which has a list of events that passed the given filters
	FindPupils(ctx context.Context, in *FindPupilsRequest, opts ...grpc.CallOption) (*FindPupilsResponse, error)
	// RemovePupils removes the pupils with the given IDs
	RemovePupils(ctx context.Context, in *RemovePupilsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) AddPupils(ctx context.Context, in *AddPupilsRequest, opts ...grpc.CallOption) (*AddPupilsResponse, error) {
	out := new(AddPupilsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/AddPupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) ChangePupilClass(ctx context.Context, in *ChangePupilClassRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/ChangePupilClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) ChangePupilResources(ctx context.Context, in *ChangePupilResourcesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/ChangePupilResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindClasses(ctx context.Context, in *FindClassesRequest, opts ...grpc.CallOption) (*FindClassesResponse, error) {
	out := new(FindClassesResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsResponse, error) {
	out := new(FindEventsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindEventByID(ctx context.Context, in *FindEventByIDRequest, opts ...grpc.CallOption) (*FindEventByIDResponse, error) {
	out := new(FindEventByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindEventClasses(ctx context.Context, in *FindEventClassesRequest, opts ...grpc.CallOption) (*FindEventClassesResponse, error) {
	out := new(FindEventClassesResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindEventClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindEventPupils(ctx context.Context, in *FindEventPupilsRequest, opts ...grpc.CallOption) (*FindEventPupilsResponse, error) {
	out := new(FindEventPupilsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindEventPupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindEventPupilByID(ctx context.Context, in *FindEventPupilByIDRequest, opts ...grpc.CallOption) (*FindEventPupilByIDResponse, error) {
	out := new(FindEventPupilByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindEventPupilByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindPupilByID(ctx context.Context, in *FindPupilByIDRequest, opts ...grpc.CallOption) (*FindPupilByIDResponse, error) {
	out := new(FindPupilByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindPupilByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) FindPupils(ctx context.Context, in *FindPupilsRequest, opts ...grpc.CallOption) (*FindPupilsResponse, error) {
	out := new(FindPupilsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/FindPupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) RemovePupils(ctx context.Context, in *RemovePupilsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventsService/RemovePupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServiceServer is the server API for EventsService service.
type EventsServiceServer interface {
	// AddPupils adds the given pupils and returns the ids of the added
	AddPupils(context.Context, *AddPupilsRequest) (*AddPupilsResponse, error)
	// ChangePupilClass changes the class of the pupil
	ChangePupilClass(context.Context, *ChangePupilClassRequest) (*empty.Empty, error)
	// ChangePupilResources changes the amount of resources brought by the pupil to the event
	ChangePupilResources(context.Context, *ChangePupilResourcesRequest) (*empty.Empty, error)
	// CreateEvent creates and stores the event
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	// DeleteEvent deletes the event
	DeleteEvent(context.Context, *DeleteEventRequest) (*empty.Empty, error)
	// FindClasses returns a list of sorted classes, each of which has a list of events that passed the given filters
	FindClasses(context.Context, *FindClassesRequest) (*FindClassesResponse, error)
	// FindEvents returns a list of sorted events that passed the provided filters
	FindEvents(context.Context, *FindEventsRequest) (*FindEventsResponse, error)
	// FindEventByID returns an event with the given id and all resources collected at that event
	FindEventByID(context.Context, *FindEventByIDRequest) (*FindEventByIDResponse, error)
	// FindEventClasses returns an array of sorted classes with the resources they brought to the specified event
	FindEventClasses(context.Context, *FindEventClassesRequest) (*FindEventClassesResponse, error)
	// FindEventPupils returns an array of sorted pupils with the resources they brought to the specified event
	FindEventPupils(context.Context, *FindEventPupilsRequest) (*FindEventPupilsResponse, error)
	// FindPupilByID returns a pupil with the given id with the resources they brought to that event
	FindEventPupilByID(context.Context, *FindEventPupilByIDRequest) (*FindEventPupilByIDResponse, error)
	// FindPupilByID returns a pupil with the given ID and a list of events they has attended
	FindPupilByID(context.Context, *FindPupilByIDRequest) (*FindPupilByIDResponse, error)
	// FindPupils returns a list of sorted classes, each of which has a list of events that passed the given filters
	FindPupils(context.Context, *FindPupilsRequest) (*FindPupilsResponse, error)
	// RemovePupils removes the pupils with the given IDs
	RemovePupils(context.Context, *RemovePupilsRequest) (*empty.Empty, error)
}

// UnimplementedEventsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventsServiceServer struct {
}

func (*UnimplementedEventsServiceServer) AddPupils(context.Context, *AddPupilsRequest) (*AddPupilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPupils not implemented")
}
func (*UnimplementedEventsServiceServer) ChangePupilClass(context.Context, *ChangePupilClassRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePupilClass not implemented")
}
func (*UnimplementedEventsServiceServer) ChangePupilResources(context.Context, *ChangePupilResourcesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePupilResources not implemented")
}
func (*UnimplementedEventsServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedEventsServiceServer) DeleteEvent(context.Context, *DeleteEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedEventsServiceServer) FindClasses(context.Context, *FindClassesRequest) (*FindClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClasses not implemented")
}
func (*UnimplementedEventsServiceServer) FindEvents(context.Context, *FindEventsRequest) (*FindEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (*UnimplementedEventsServiceServer) FindEventByID(context.Context, *FindEventByIDRequest) (*FindEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventByID not implemented")
}
func (*UnimplementedEventsServiceServer) FindEventClasses(context.Context, *FindEventClassesRequest) (*FindEventClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventClasses not implemented")
}
func (*UnimplementedEventsServiceServer) FindEventPupils(context.Context, *FindEventPupilsRequest) (*FindEventPupilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventPupils not implemented")
}
func (*UnimplementedEventsServiceServer) FindEventPupilByID(context.Context, *FindEventPupilByIDRequest) (*FindEventPupilByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventPupilByID not implemented")
}
func (*UnimplementedEventsServiceServer) FindPupilByID(context.Context, *FindPupilByIDRequest) (*FindPupilByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPupilByID not implemented")
}
func (*UnimplementedEventsServiceServer) FindPupils(context.Context, *FindPupilsRequest) (*FindPupilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPupils not implemented")
}
func (*UnimplementedEventsServiceServer) RemovePupils(context.Context, *RemovePupilsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePupils not implemented")
}

func RegisterEventsServiceServer(s *grpc.Server, srv EventsServiceServer) {
	s.RegisterService(&_EventsService_serviceDesc, srv)
}

func _EventsService_AddPupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).AddPupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/AddPupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).AddPupils(ctx, req.(*AddPupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_ChangePupilClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePupilClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).ChangePupilClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/ChangePupilClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).ChangePupilClass(ctx, req.(*ChangePupilClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_ChangePupilResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePupilResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).ChangePupilResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/ChangePupilResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).ChangePupilResources(ctx, req.(*ChangePupilResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindClasses(ctx, req.(*FindClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindEvents(ctx, req.(*FindEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindEventByID(ctx, req.(*FindEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindEventClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindEventClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindEventClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindEventClasses(ctx, req.(*FindEventClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindEventPupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventPupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindEventPupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindEventPupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindEventPupils(ctx, req.(*FindEventPupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindEventPupilByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventPupilByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindEventPupilByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindEventPupilByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindEventPupilByID(ctx, req.(*FindEventPupilByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindPupilByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPupilByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindPupilByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindPupilByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindPupilByID(ctx, req.(*FindPupilByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_FindPupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).FindPupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/FindPupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).FindPupils(ctx, req.(*FindPupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_RemovePupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).RemovePupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventsService/RemovePupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).RemovePupils(ctx, req.(*RemovePupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shanvl.garbage.events.v1.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPupils",
			Handler:    _EventsService_AddPupils_Handler,
		},
		{
			MethodName: "ChangePupilClass",
			Handler:    _EventsService_ChangePupilClass_Handler,
		},
		{
			MethodName: "ChangePupilResources",
			Handler:    _EventsService_ChangePupilResources_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventsService_CreateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventsService_DeleteEvent_Handler,
		},
		{
			MethodName: "FindClasses",
			Handler:    _EventsService_FindClasses_Handler,
		},
		{
			MethodName: "FindEvents",
			Handler:    _EventsService_FindEvents_Handler,
		},
		{
			MethodName: "FindEventByID",
			Handler:    _EventsService_FindEventByID_Handler,
		},
		{
			MethodName: "FindEventClasses",
			Handler:    _EventsService_FindEventClasses_Handler,
		},
		{
			MethodName: "FindEventPupils",
			Handler:    _EventsService_FindEventPupils_Handler,
		},
		{
			MethodName: "FindEventPupilByID",
			Handler:    _EventsService_FindEventPupilByID_Handler,
		},
		{
			MethodName: "FindPupilByID",
			Handler:    _EventsService_FindPupilByID_Handler,
		},
		{
			MethodName: "FindPupils",
			Handler:    _EventsService_FindPupils_Handler,
		},
		{
			MethodName: "RemovePupils",
			Handler:    _EventsService_RemovePupils_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events_service.proto",
}
