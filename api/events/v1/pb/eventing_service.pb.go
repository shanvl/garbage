// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: eventing_service.proto

package eventsv1pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChangePupilResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PupilId string `protobuf:"bytes,2,opt,name=pupil_id,json=pupilId,proto3" json:"pupil_id,omitempty"`
	// amount of resources brought by the pupil to the event
	ResourcesBrought *ResourcesBrought `protobuf:"bytes,3,opt,name=resources_brought,json=resourcesBrought,proto3" json:"resources_brought,omitempty"`
}

func (x *ChangePupilResourcesRequest) Reset() {
	*x = ChangePupilResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePupilResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePupilResourcesRequest) ProtoMessage() {}

func (x *ChangePupilResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePupilResourcesRequest.ProtoReflect.Descriptor instead.
func (*ChangePupilResourcesRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{0}
}

func (x *ChangePupilResourcesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ChangePupilResourcesRequest) GetPupilId() string {
	if x != nil {
		return x.PupilId
	}
	return ""
}

func (x *ChangePupilResourcesRequest) GetResourcesBrought() *ResourcesBrought {
	if x != nil {
		return x.ResourcesBrought
	}
	return nil
}

type CreateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event date
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Name string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// resources permitted on the event
	ResourcesAllowed []Resource `protobuf:"varint,3,rep,packed,name=resources_allowed,json=resourcesAllowed,proto3,enum=shanvl.garbage.events.v1.Resource" json:"resources_allowed,omitempty"`
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEventRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CreateEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEventRequest) GetResourcesAllowed() []Resource {
	if x != nil {
		return x.ResourcesAllowed
	}
	return nil
}

type CreateEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEventResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEventRequest) Reset() {
	*x = DeleteEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventRequest) ProtoMessage() {}

func (x *DeleteEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindEventByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindEventByIDRequest) Reset() {
	*x = FindEventByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventByIDRequest) ProtoMessage() {}

func (x *FindEventByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventByIDRequest.ProtoReflect.Descriptor instead.
func (*FindEventByIDRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{4}
}

func (x *FindEventByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindEventByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event's info with the resources collected on that event
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *FindEventByIDResponse) Reset() {
	*x = FindEventByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventByIDResponse) ProtoMessage() {}

func (x *FindEventByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventByIDResponse.ProtoReflect.Descriptor instead.
func (*FindEventByIDResponse) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{5}
}

func (x *FindEventByIDResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type FindEventClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// text search field with a class name as it was on the date of the event (class name changes depending on the
	// event's date)
	ClassName string       `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Sorting   ClassSorting `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.ClassSorting" json:"sorting,omitempty"`
	Amount    uint32       `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip      uint32       `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventClassesRequest) Reset() {
	*x = FindEventClassesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventClassesRequest) ProtoMessage() {}

func (x *FindEventClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventClassesRequest.ProtoReflect.Descriptor instead.
func (*FindEventClassesRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{6}
}

func (x *FindEventClassesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventClassesRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FindEventClassesRequest) GetSorting() ClassSorting {
	if x != nil {
		return x.Sorting
	}
	return ClassSorting_CLASS_SORTING_UNKNOWN
}

func (x *FindEventClassesRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventClassesRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of found classes with the resources each class brought to the event
	Classes []*Class `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	// total classes found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventClassesResponse) Reset() {
	*x = FindEventClassesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventClassesResponse) ProtoMessage() {}

func (x *FindEventClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventClassesResponse.ProtoReflect.Descriptor instead.
func (*FindEventClassesResponse) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{7}
}

func (x *FindEventClassesResponse) GetClasses() []*Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *FindEventClassesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventPupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// text search field with the combination of pupils names and classes names as they were on the date of the event
	// (class name changes depending on the event's date)
	NameAndClass string       `protobuf:"bytes,2,opt,name=name_and_class,json=nameAndClass,proto3" json:"name_and_class,omitempty"`
	Sorting      PupilSorting `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.PupilSorting" json:"sorting,omitempty"`
	Amount       uint32       `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32       `protobuf:"varint,5,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventPupilsRequest) Reset() {
	*x = FindEventPupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilsRequest) ProtoMessage() {}

func (x *FindEventPupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilsRequest.ProtoReflect.Descriptor instead.
func (*FindEventPupilsRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{8}
}

func (x *FindEventPupilsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventPupilsRequest) GetNameAndClass() string {
	if x != nil {
		return x.NameAndClass
	}
	return ""
}

func (x *FindEventPupilsRequest) GetSorting() PupilSorting {
	if x != nil {
		return x.Sorting
	}
	return PupilSorting_PUPIL_SORTING_UNKNOWN
}

func (x *FindEventPupilsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventPupilsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventPupilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of found pupils with the resources each pupil brought to the event
	Pupils []*Pupil `protobuf:"bytes,1,rep,name=pupils,proto3" json:"pupils,omitempty"`
	// total pupils found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventPupilsResponse) Reset() {
	*x = FindEventPupilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilsResponse) ProtoMessage() {}

func (x *FindEventPupilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilsResponse.ProtoReflect.Descriptor instead.
func (*FindEventPupilsResponse) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{9}
}

func (x *FindEventPupilsResponse) GetPupils() []*Pupil {
	if x != nil {
		return x.Pupils
	}
	return nil
}

func (x *FindEventPupilsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventPupilByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PupilId string `protobuf:"bytes,2,opt,name=pupil_id,json=pupilId,proto3" json:"pupil_id,omitempty"`
}

func (x *FindEventPupilByIDRequest) Reset() {
	*x = FindEventPupilByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilByIDRequest) ProtoMessage() {}

func (x *FindEventPupilByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilByIDRequest.ProtoReflect.Descriptor instead.
func (*FindEventPupilByIDRequest) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{10}
}

func (x *FindEventPupilByIDRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *FindEventPupilByIDRequest) GetPupilId() string {
	if x != nil {
		return x.PupilId
	}
	return ""
}

type FindEventPupilByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pupil info with the resources they brought to the event
	Pupil *Pupil `protobuf:"bytes,1,opt,name=pupil,proto3" json:"pupil,omitempty"`
}

func (x *FindEventPupilByIDResponse) Reset() {
	*x = FindEventPupilByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventing_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventPupilByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventPupilByIDResponse) ProtoMessage() {}

func (x *FindEventPupilByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventing_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventPupilByIDResponse.ProtoReflect.Descriptor instead.
func (*FindEventPupilByIDResponse) Descriptor() ([]byte, []int) {
	return file_eventing_service_proto_rawDescGZIP(), []int{11}
}

func (x *FindEventPupilByIDResponse) GetPupil() *Pupil {
	if x != nil {
		return x.Pupil
	}
	return nil
}

var File_eventing_service_proto protoreflect.FileDescriptor

var file_eventing_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a,
	0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f,
	0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x42, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x42, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x15,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x22, 0x6b, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc7, 0x01,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61,
	0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x68, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x70, 0x69, 0x6c, 0x52, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x51, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x52, 0x05, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x32, 0xa0, 0x08, 0x0a, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x99, 0x01,
	0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x1a, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e,
	0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x30,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c,
	0x73, 0x2f, 0x7b, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x0e, 0x5a, 0x0c,
	0x2e, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x76, 0x31, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventing_service_proto_rawDescOnce sync.Once
	file_eventing_service_proto_rawDescData = file_eventing_service_proto_rawDesc
)

func file_eventing_service_proto_rawDescGZIP() []byte {
	file_eventing_service_proto_rawDescOnce.Do(func() {
		file_eventing_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventing_service_proto_rawDescData)
	})
	return file_eventing_service_proto_rawDescData
}

var file_eventing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_eventing_service_proto_goTypes = []interface{}{
	(*ChangePupilResourcesRequest)(nil), // 0: shanvl.garbage.events.v1.ChangePupilResourcesRequest
	(*CreateEventRequest)(nil),          // 1: shanvl.garbage.events.v1.CreateEventRequest
	(*CreateEventResponse)(nil),         // 2: shanvl.garbage.events.v1.CreateEventResponse
	(*DeleteEventRequest)(nil),          // 3: shanvl.garbage.events.v1.DeleteEventRequest
	(*FindEventByIDRequest)(nil),        // 4: shanvl.garbage.events.v1.FindEventByIDRequest
	(*FindEventByIDResponse)(nil),       // 5: shanvl.garbage.events.v1.FindEventByIDResponse
	(*FindEventClassesRequest)(nil),     // 6: shanvl.garbage.events.v1.FindEventClassesRequest
	(*FindEventClassesResponse)(nil),    // 7: shanvl.garbage.events.v1.FindEventClassesResponse
	(*FindEventPupilsRequest)(nil),      // 8: shanvl.garbage.events.v1.FindEventPupilsRequest
	(*FindEventPupilsResponse)(nil),     // 9: shanvl.garbage.events.v1.FindEventPupilsResponse
	(*FindEventPupilByIDRequest)(nil),   // 10: shanvl.garbage.events.v1.FindEventPupilByIDRequest
	(*FindEventPupilByIDResponse)(nil),  // 11: shanvl.garbage.events.v1.FindEventPupilByIDResponse
	(*ResourcesBrought)(nil),            // 12: shanvl.garbage.events.v1.ResourcesBrought
	(*timestamp.Timestamp)(nil),         // 13: google.protobuf.Timestamp
	(Resource)(0),                       // 14: shanvl.garbage.events.v1.Resource
	(*Event)(nil),                       // 15: shanvl.garbage.events.v1.Event
	(ClassSorting)(0),                   // 16: shanvl.garbage.events.v1.ClassSorting
	(*Class)(nil),                       // 17: shanvl.garbage.events.v1.Class
	(PupilSorting)(0),                   // 18: shanvl.garbage.events.v1.PupilSorting
	(*Pupil)(nil),                       // 19: shanvl.garbage.events.v1.Pupil
	(*empty.Empty)(nil),                 // 20: google.protobuf.Empty
}
var file_eventing_service_proto_depIdxs = []int32{
	12, // 0: shanvl.garbage.events.v1.ChangePupilResourcesRequest.resources_brought:type_name -> shanvl.garbage.events.v1.ResourcesBrought
	13, // 1: shanvl.garbage.events.v1.CreateEventRequest.date:type_name -> google.protobuf.Timestamp
	14, // 2: shanvl.garbage.events.v1.CreateEventRequest.resources_allowed:type_name -> shanvl.garbage.events.v1.Resource
	15, // 3: shanvl.garbage.events.v1.FindEventByIDResponse.event:type_name -> shanvl.garbage.events.v1.Event
	16, // 4: shanvl.garbage.events.v1.FindEventClassesRequest.sorting:type_name -> shanvl.garbage.events.v1.ClassSorting
	17, // 5: shanvl.garbage.events.v1.FindEventClassesResponse.classes:type_name -> shanvl.garbage.events.v1.Class
	18, // 6: shanvl.garbage.events.v1.FindEventPupilsRequest.sorting:type_name -> shanvl.garbage.events.v1.PupilSorting
	19, // 7: shanvl.garbage.events.v1.FindEventPupilsResponse.pupils:type_name -> shanvl.garbage.events.v1.Pupil
	19, // 8: shanvl.garbage.events.v1.FindEventPupilByIDResponse.pupil:type_name -> shanvl.garbage.events.v1.Pupil
	0,  // 9: shanvl.garbage.events.v1.EventingService.ChangePupilResources:input_type -> shanvl.garbage.events.v1.ChangePupilResourcesRequest
	1,  // 10: shanvl.garbage.events.v1.EventingService.CreateEvent:input_type -> shanvl.garbage.events.v1.CreateEventRequest
	3,  // 11: shanvl.garbage.events.v1.EventingService.DeleteEvent:input_type -> shanvl.garbage.events.v1.DeleteEventRequest
	4,  // 12: shanvl.garbage.events.v1.EventingService.FindEventByID:input_type -> shanvl.garbage.events.v1.FindEventByIDRequest
	6,  // 13: shanvl.garbage.events.v1.EventingService.FindEventClasses:input_type -> shanvl.garbage.events.v1.FindEventClassesRequest
	8,  // 14: shanvl.garbage.events.v1.EventingService.FindEventPupils:input_type -> shanvl.garbage.events.v1.FindEventPupilsRequest
	10, // 15: shanvl.garbage.events.v1.EventingService.FindEventPupilByID:input_type -> shanvl.garbage.events.v1.FindEventPupilByIDRequest
	20, // 16: shanvl.garbage.events.v1.EventingService.ChangePupilResources:output_type -> google.protobuf.Empty
	2,  // 17: shanvl.garbage.events.v1.EventingService.CreateEvent:output_type -> shanvl.garbage.events.v1.CreateEventResponse
	20, // 18: shanvl.garbage.events.v1.EventingService.DeleteEvent:output_type -> google.protobuf.Empty
	5,  // 19: shanvl.garbage.events.v1.EventingService.FindEventByID:output_type -> shanvl.garbage.events.v1.FindEventByIDResponse
	7,  // 20: shanvl.garbage.events.v1.EventingService.FindEventClasses:output_type -> shanvl.garbage.events.v1.FindEventClassesResponse
	9,  // 21: shanvl.garbage.events.v1.EventingService.FindEventPupils:output_type -> shanvl.garbage.events.v1.FindEventPupilsResponse
	11, // 22: shanvl.garbage.events.v1.EventingService.FindEventPupilByID:output_type -> shanvl.garbage.events.v1.FindEventPupilByIDResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_eventing_service_proto_init() }
func file_eventing_service_proto_init() {
	if File_eventing_service_proto != nil {
		return
	}
	file_events_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eventing_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePupilResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventClassesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventClassesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventing_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventPupilByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventing_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventing_service_proto_goTypes,
		DependencyIndexes: file_eventing_service_proto_depIdxs,
		MessageInfos:      file_eventing_service_proto_msgTypes,
	}.Build()
	File_eventing_service_proto = out.File
	file_eventing_service_proto_rawDesc = nil
	file_eventing_service_proto_goTypes = nil
	file_eventing_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventingServiceClient is the client API for EventingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventingServiceClient interface {
	// ChangePupilResources changes the amount of resources brought by the pupil to the event
	ChangePupilResources(ctx context.Context, in *ChangePupilResourcesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateEvent creates and stores the event
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	// DeleteEvent deletes the event
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// FindEventByID returns an event with the given id and all resources collected at that event
	FindEventByID(ctx context.Context, in *FindEventByIDRequest, opts ...grpc.CallOption) (*FindEventByIDResponse, error)
	// FindEventClasses returns an array of sorted classes with the resources they brought to the specified event
	FindEventClasses(ctx context.Context, in *FindEventClassesRequest, opts ...grpc.CallOption) (*FindEventClassesResponse, error)
	// FindEventPupils returns an array of sorted pupils with the resources they brought to the specified event
	FindEventPupils(ctx context.Context, in *FindEventPupilsRequest, opts ...grpc.CallOption) (*FindEventPupilsResponse, error)
	// FindPupilByID returns a pupil with the given id with the resources they brought to that event
	FindEventPupilByID(ctx context.Context, in *FindEventPupilByIDRequest, opts ...grpc.CallOption) (*FindEventPupilByIDResponse, error)
}

type eventingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventingServiceClient(cc grpc.ClientConnInterface) EventingServiceClient {
	return &eventingServiceClient{cc}
}

func (c *eventingServiceClient) ChangePupilResources(ctx context.Context, in *ChangePupilResourcesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/ChangePupilResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) FindEventByID(ctx context.Context, in *FindEventByIDRequest, opts ...grpc.CallOption) (*FindEventByIDResponse, error) {
	out := new(FindEventByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/FindEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) FindEventClasses(ctx context.Context, in *FindEventClassesRequest, opts ...grpc.CallOption) (*FindEventClassesResponse, error) {
	out := new(FindEventClassesResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/FindEventClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) FindEventPupils(ctx context.Context, in *FindEventPupilsRequest, opts ...grpc.CallOption) (*FindEventPupilsResponse, error) {
	out := new(FindEventPupilsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/FindEventPupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventingServiceClient) FindEventPupilByID(ctx context.Context, in *FindEventPupilByIDRequest, opts ...grpc.CallOption) (*FindEventPupilByIDResponse, error) {
	out := new(FindEventPupilByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.EventingService/FindEventPupilByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventingServiceServer is the server API for EventingService service.
type EventingServiceServer interface {
	// ChangePupilResources changes the amount of resources brought by the pupil to the event
	ChangePupilResources(context.Context, *ChangePupilResourcesRequest) (*empty.Empty, error)
	// CreateEvent creates and stores the event
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	// DeleteEvent deletes the event
	DeleteEvent(context.Context, *DeleteEventRequest) (*empty.Empty, error)
	// FindEventByID returns an event with the given id and all resources collected at that event
	FindEventByID(context.Context, *FindEventByIDRequest) (*FindEventByIDResponse, error)
	// FindEventClasses returns an array of sorted classes with the resources they brought to the specified event
	FindEventClasses(context.Context, *FindEventClassesRequest) (*FindEventClassesResponse, error)
	// FindEventPupils returns an array of sorted pupils with the resources they brought to the specified event
	FindEventPupils(context.Context, *FindEventPupilsRequest) (*FindEventPupilsResponse, error)
	// FindPupilByID returns a pupil with the given id with the resources they brought to that event
	FindEventPupilByID(context.Context, *FindEventPupilByIDRequest) (*FindEventPupilByIDResponse, error)
}

// UnimplementedEventingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventingServiceServer struct {
}

func (*UnimplementedEventingServiceServer) ChangePupilResources(context.Context, *ChangePupilResourcesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePupilResources not implemented")
}
func (*UnimplementedEventingServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedEventingServiceServer) DeleteEvent(context.Context, *DeleteEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedEventingServiceServer) FindEventByID(context.Context, *FindEventByIDRequest) (*FindEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventByID not implemented")
}
func (*UnimplementedEventingServiceServer) FindEventClasses(context.Context, *FindEventClassesRequest) (*FindEventClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventClasses not implemented")
}
func (*UnimplementedEventingServiceServer) FindEventPupils(context.Context, *FindEventPupilsRequest) (*FindEventPupilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventPupils not implemented")
}
func (*UnimplementedEventingServiceServer) FindEventPupilByID(context.Context, *FindEventPupilByIDRequest) (*FindEventPupilByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEventPupilByID not implemented")
}

func RegisterEventingServiceServer(s *grpc.Server, srv EventingServiceServer) {
	s.RegisterService(&_EventingService_serviceDesc, srv)
}

func _EventingService_ChangePupilResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePupilResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).ChangePupilResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/ChangePupilResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).ChangePupilResources(ctx, req.(*ChangePupilResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_FindEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).FindEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/FindEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).FindEventByID(ctx, req.(*FindEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_FindEventClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).FindEventClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/FindEventClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).FindEventClasses(ctx, req.(*FindEventClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_FindEventPupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventPupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).FindEventPupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/FindEventPupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).FindEventPupils(ctx, req.(*FindEventPupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventingService_FindEventPupilByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventPupilByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventingServiceServer).FindEventPupilByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.EventingService/FindEventPupilByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventingServiceServer).FindEventPupilByID(ctx, req.(*FindEventPupilByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shanvl.garbage.events.v1.EventingService",
	HandlerType: (*EventingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePupilResources",
			Handler:    _EventingService_ChangePupilResources_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventingService_CreateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventingService_DeleteEvent_Handler,
		},
		{
			MethodName: "FindEventByID",
			Handler:    _EventingService_FindEventByID_Handler,
		},
		{
			MethodName: "FindEventClasses",
			Handler:    _EventingService_FindEventClasses_Handler,
		},
		{
			MethodName: "FindEventPupils",
			Handler:    _EventingService_FindEventPupils_Handler,
		},
		{
			MethodName: "FindEventPupilByID",
			Handler:    _EventingService_FindEventPupilByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventing_service.proto",
}
