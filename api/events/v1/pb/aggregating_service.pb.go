// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: aggregating_service.proto

package eventsv1pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Note, that we can't use the class name here because it changes depending on the event's date. So the class' letter
// the date it was formed on used instead
type FindClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// letter of the class
	Letter string `protobuf:"bytes,1,opt,name=letter,proto3" json:"letter,omitempty"`
	// date the class was formed on
	DateFormed   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_formed,json=dateFormed,proto3" json:"date_formed,omitempty"`
	EventFilters *EventFilters        `protobuf:"bytes,3,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	Sorting      ClassSorting         `protobuf:"varint,4,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.ClassSorting" json:"sorting,omitempty"`
	EventSorting EventSorting         `protobuf:"varint,5,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
	Amount       uint32               `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32               `protobuf:"varint,7,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindClassesRequest) Reset() {
	*x = FindClassesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindClassesRequest) ProtoMessage() {}

func (x *FindClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindClassesRequest.ProtoReflect.Descriptor instead.
func (*FindClassesRequest) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{0}
}

func (x *FindClassesRequest) GetLetter() string {
	if x != nil {
		return x.Letter
	}
	return ""
}

func (x *FindClassesRequest) GetDateFormed() *timestamp.Timestamp {
	if x != nil {
		return x.DateFormed
	}
	return nil
}

func (x *FindClassesRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindClassesRequest) GetSorting() ClassSorting {
	if x != nil {
		return x.Sorting
	}
	return ClassSorting_CLASS_SORTING_UNKNOWN
}

func (x *FindClassesRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindClassesRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindClassesRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of classes with aggregated info about the resources a class has brought to every event that
	// passed the filters and a list of those events for each class
	Classes []*ClassAggr `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	// total classes found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindClassesResponse) Reset() {
	*x = FindClassesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindClassesResponse) ProtoMessage() {}

func (x *FindClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindClassesResponse.ProtoReflect.Descriptor instead.
func (*FindClassesResponse) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{1}
}

func (x *FindClassesResponse) GetClasses() []*ClassAggr {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *FindClassesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *EventFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Sorting EventSorting  `protobuf:"varint,2,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"sorting,omitempty"`
	Amount  uint32        `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip    uint32        `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindEventsRequest) Reset() {
	*x = FindEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventsRequest) ProtoMessage() {}

func (x *FindEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventsRequest.ProtoReflect.Descriptor instead.
func (*FindEventsRequest) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{2}
}

func (x *FindEventsRequest) GetFilters() *EventFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FindEventsRequest) GetSorting() EventSorting {
	if x != nil {
		return x.Sorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindEventsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindEventsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of the events that passed the provided filters
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// total events found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindEventsResponse) Reset() {
	*x = FindEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEventsResponse) ProtoMessage() {}

func (x *FindEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEventsResponse.ProtoReflect.Descriptor instead.
func (*FindEventsResponse) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{3}
}

func (x *FindEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *FindEventsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FindPupilByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventFilters *EventFilters `protobuf:"bytes,2,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	EventSorting EventSorting  `protobuf:"varint,3,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
}

func (x *FindPupilByIDRequest) Reset() {
	*x = FindPupilByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilByIDRequest) ProtoMessage() {}

func (x *FindPupilByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilByIDRequest.ProtoReflect.Descriptor instead.
func (*FindPupilByIDRequest) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{4}
}

func (x *FindPupilByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindPupilByIDRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindPupilByIDRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

type FindPupilByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pupil with aggregated info about the resources the pupil brought to every event that
	// passed the filters and a list of those events
	Pupil *PupilAggr `protobuf:"bytes,1,opt,name=pupil,proto3" json:"pupil,omitempty"`
}

func (x *FindPupilByIDResponse) Reset() {
	*x = FindPupilByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilByIDResponse) ProtoMessage() {}

func (x *FindPupilByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilByIDResponse.ProtoReflect.Descriptor instead.
func (*FindPupilByIDResponse) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{5}
}

func (x *FindPupilByIDResponse) GetPupil() *PupilAggr {
	if x != nil {
		return x.Pupil
	}
	return nil
}

type FindPupilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text search field that can be a combination of the name of a pupil and the name of their class
	NameAndClass string        `protobuf:"bytes,1,opt,name=name_and_class,json=nameAndClass,proto3" json:"name_and_class,omitempty"`
	EventFilters *EventFilters `protobuf:"bytes,2,opt,name=event_filters,json=eventFilters,proto3" json:"event_filters,omitempty"`
	Sorting      PupilSorting  `protobuf:"varint,3,opt,name=sorting,proto3,enum=shanvl.garbage.events.v1.PupilSorting" json:"sorting,omitempty"`
	EventSorting EventSorting  `protobuf:"varint,4,opt,name=event_sorting,json=eventSorting,proto3,enum=shanvl.garbage.events.v1.EventSorting" json:"event_sorting,omitempty"`
	Amount       uint32        `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Skip         uint32        `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *FindPupilsRequest) Reset() {
	*x = FindPupilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilsRequest) ProtoMessage() {}

func (x *FindPupilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilsRequest.ProtoReflect.Descriptor instead.
func (*FindPupilsRequest) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{6}
}

func (x *FindPupilsRequest) GetNameAndClass() string {
	if x != nil {
		return x.NameAndClass
	}
	return ""
}

func (x *FindPupilsRequest) GetEventFilters() *EventFilters {
	if x != nil {
		return x.EventFilters
	}
	return nil
}

func (x *FindPupilsRequest) GetSorting() PupilSorting {
	if x != nil {
		return x.Sorting
	}
	return PupilSorting_PUPIL_SORTING_UNKNOWN
}

func (x *FindPupilsRequest) GetEventSorting() EventSorting {
	if x != nil {
		return x.EventSorting
	}
	return EventSorting_EVENT_SORTING_UNKNOWN
}

func (x *FindPupilsRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FindPupilsRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

type FindPupilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of pupils with aggregated info about the resources a pupil has brought to every event that
	// passed the filters and a list of those events for each pupil
	Pupils []*PupilAggr `protobuf:"bytes,1,rep,name=pupils,proto3" json:"pupils,omitempty"`
	// total pupils found
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FindPupilsResponse) Reset() {
	*x = FindPupilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregating_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPupilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPupilsResponse) ProtoMessage() {}

func (x *FindPupilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aggregating_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPupilsResponse.ProtoReflect.Descriptor instead.
func (*FindPupilsResponse) Descriptor() ([]byte, []int) {
	return file_aggregating_service_proto_rawDescGZIP(), []int{7}
}

func (x *FindPupilsResponse) GetPupils() []*PupilAggr {
	if x != nil {
		return x.Pupils
	}
	return nil
}

func (x *FindPupilsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_aggregating_service_proto protoreflect.FileDescriptor

var file_aggregating_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x68, 0x61,
	0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x6a, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e,
	0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68,
	0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x63, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc0, 0x01,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61,
	0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x52, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x75, 0x70,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x41, 0x67, 0x67, 0x72, 0x52, 0x05, 0x70,
	0x75, 0x70, 0x69, 0x6c, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x4b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x67, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x41,
	0x67, 0x67, 0x72, 0x52, 0x06, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x32, 0x9b, 0x04, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c,
	0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61,
	0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76,
	0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70, 0x69, 0x6c, 0x73,
	0x12, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x73, 0x68, 0x61, 0x6e, 0x76, 0x6c, 0x2e, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x75, 0x70,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x70, 0x69, 0x6c, 0x73, 0x42,
	0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x76, 0x31, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aggregating_service_proto_rawDescOnce sync.Once
	file_aggregating_service_proto_rawDescData = file_aggregating_service_proto_rawDesc
)

func file_aggregating_service_proto_rawDescGZIP() []byte {
	file_aggregating_service_proto_rawDescOnce.Do(func() {
		file_aggregating_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_aggregating_service_proto_rawDescData)
	})
	return file_aggregating_service_proto_rawDescData
}

var file_aggregating_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_aggregating_service_proto_goTypes = []interface{}{
	(*FindClassesRequest)(nil),    // 0: shanvl.garbage.events.v1.FindClassesRequest
	(*FindClassesResponse)(nil),   // 1: shanvl.garbage.events.v1.FindClassesResponse
	(*FindEventsRequest)(nil),     // 2: shanvl.garbage.events.v1.FindEventsRequest
	(*FindEventsResponse)(nil),    // 3: shanvl.garbage.events.v1.FindEventsResponse
	(*FindPupilByIDRequest)(nil),  // 4: shanvl.garbage.events.v1.FindPupilByIDRequest
	(*FindPupilByIDResponse)(nil), // 5: shanvl.garbage.events.v1.FindPupilByIDResponse
	(*FindPupilsRequest)(nil),     // 6: shanvl.garbage.events.v1.FindPupilsRequest
	(*FindPupilsResponse)(nil),    // 7: shanvl.garbage.events.v1.FindPupilsResponse
	(*timestamp.Timestamp)(nil),   // 8: google.protobuf.Timestamp
	(*EventFilters)(nil),          // 9: shanvl.garbage.events.v1.EventFilters
	(ClassSorting)(0),             // 10: shanvl.garbage.events.v1.ClassSorting
	(EventSorting)(0),             // 11: shanvl.garbage.events.v1.EventSorting
	(*ClassAggr)(nil),             // 12: shanvl.garbage.events.v1.ClassAggr
	(*Event)(nil),                 // 13: shanvl.garbage.events.v1.Event
	(*PupilAggr)(nil),             // 14: shanvl.garbage.events.v1.PupilAggr
	(PupilSorting)(0),             // 15: shanvl.garbage.events.v1.PupilSorting
}
var file_aggregating_service_proto_depIdxs = []int32{
	8,  // 0: shanvl.garbage.events.v1.FindClassesRequest.date_formed:type_name -> google.protobuf.Timestamp
	9,  // 1: shanvl.garbage.events.v1.FindClassesRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	10, // 2: shanvl.garbage.events.v1.FindClassesRequest.sorting:type_name -> shanvl.garbage.events.v1.ClassSorting
	11, // 3: shanvl.garbage.events.v1.FindClassesRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	12, // 4: shanvl.garbage.events.v1.FindClassesResponse.classes:type_name -> shanvl.garbage.events.v1.ClassAggr
	9,  // 5: shanvl.garbage.events.v1.FindEventsRequest.filters:type_name -> shanvl.garbage.events.v1.EventFilters
	11, // 6: shanvl.garbage.events.v1.FindEventsRequest.sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	13, // 7: shanvl.garbage.events.v1.FindEventsResponse.events:type_name -> shanvl.garbage.events.v1.Event
	9,  // 8: shanvl.garbage.events.v1.FindPupilByIDRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	11, // 9: shanvl.garbage.events.v1.FindPupilByIDRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	14, // 10: shanvl.garbage.events.v1.FindPupilByIDResponse.pupil:type_name -> shanvl.garbage.events.v1.PupilAggr
	9,  // 11: shanvl.garbage.events.v1.FindPupilsRequest.event_filters:type_name -> shanvl.garbage.events.v1.EventFilters
	15, // 12: shanvl.garbage.events.v1.FindPupilsRequest.sorting:type_name -> shanvl.garbage.events.v1.PupilSorting
	11, // 13: shanvl.garbage.events.v1.FindPupilsRequest.event_sorting:type_name -> shanvl.garbage.events.v1.EventSorting
	14, // 14: shanvl.garbage.events.v1.FindPupilsResponse.pupils:type_name -> shanvl.garbage.events.v1.PupilAggr
	0,  // 15: shanvl.garbage.events.v1.AggregatingService.FindClasses:input_type -> shanvl.garbage.events.v1.FindClassesRequest
	2,  // 16: shanvl.garbage.events.v1.AggregatingService.FindEvents:input_type -> shanvl.garbage.events.v1.FindEventsRequest
	4,  // 17: shanvl.garbage.events.v1.AggregatingService.FindPupilByID:input_type -> shanvl.garbage.events.v1.FindPupilByIDRequest
	6,  // 18: shanvl.garbage.events.v1.AggregatingService.FindPupils:input_type -> shanvl.garbage.events.v1.FindPupilsRequest
	1,  // 19: shanvl.garbage.events.v1.AggregatingService.FindClasses:output_type -> shanvl.garbage.events.v1.FindClassesResponse
	3,  // 20: shanvl.garbage.events.v1.AggregatingService.FindEvents:output_type -> shanvl.garbage.events.v1.FindEventsResponse
	5,  // 21: shanvl.garbage.events.v1.AggregatingService.FindPupilByID:output_type -> shanvl.garbage.events.v1.FindPupilByIDResponse
	7,  // 22: shanvl.garbage.events.v1.AggregatingService.FindPupils:output_type -> shanvl.garbage.events.v1.FindPupilsResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_aggregating_service_proto_init() }
func file_aggregating_service_proto_init() {
	if File_aggregating_service_proto != nil {
		return
	}
	file_events_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aggregating_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindClassesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindClassesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregating_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPupilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aggregating_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aggregating_service_proto_goTypes,
		DependencyIndexes: file_aggregating_service_proto_depIdxs,
		MessageInfos:      file_aggregating_service_proto_msgTypes,
	}.Build()
	File_aggregating_service_proto = out.File
	file_aggregating_service_proto_rawDesc = nil
	file_aggregating_service_proto_goTypes = nil
	file_aggregating_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AggregatingServiceClient is the client API for AggregatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatingServiceClient interface {
	// FindClasses returns a list of sorted classes with the list of resources they have brought to the events
	// that passed the given filters
	FindClasses(ctx context.Context, in *FindClassesRequest, opts ...grpc.CallOption) (*FindClassesResponse, error)
	// FindEvents returns a list of sorted events that passed the provided filters
	FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsResponse, error)
	// FindPupilByID returns a pupil with the given ID with the list of all resources they has brought to the events
	// that passed the provided filters
	FindPupilByID(ctx context.Context, in *FindPupilByIDRequest, opts ...grpc.CallOption) (*FindPupilByIDResponse, error)
	// FindPupils returns a list of sorted pupils with the list of resources they have brought to the events that
	// passed the given filters
	FindPupils(ctx context.Context, in *FindPupilsRequest, opts ...grpc.CallOption) (*FindPupilsResponse, error)
}

type aggregatingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatingServiceClient(cc grpc.ClientConnInterface) AggregatingServiceClient {
	return &aggregatingServiceClient{cc}
}

func (c *aggregatingServiceClient) FindClasses(ctx context.Context, in *FindClassesRequest, opts ...grpc.CallOption) (*FindClassesResponse, error) {
	out := new(FindClassesResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.AggregatingService/FindClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatingServiceClient) FindEvents(ctx context.Context, in *FindEventsRequest, opts ...grpc.CallOption) (*FindEventsResponse, error) {
	out := new(FindEventsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.AggregatingService/FindEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatingServiceClient) FindPupilByID(ctx context.Context, in *FindPupilByIDRequest, opts ...grpc.CallOption) (*FindPupilByIDResponse, error) {
	out := new(FindPupilByIDResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.AggregatingService/FindPupilByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatingServiceClient) FindPupils(ctx context.Context, in *FindPupilsRequest, opts ...grpc.CallOption) (*FindPupilsResponse, error) {
	out := new(FindPupilsResponse)
	err := c.cc.Invoke(ctx, "/shanvl.garbage.events.v1.AggregatingService/FindPupils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatingServiceServer is the server API for AggregatingService service.
type AggregatingServiceServer interface {
	// FindClasses returns a list of sorted classes with the list of resources they have brought to the events
	// that passed the given filters
	FindClasses(context.Context, *FindClassesRequest) (*FindClassesResponse, error)
	// FindEvents returns a list of sorted events that passed the provided filters
	FindEvents(context.Context, *FindEventsRequest) (*FindEventsResponse, error)
	// FindPupilByID returns a pupil with the given ID with the list of all resources they has brought to the events
	// that passed the provided filters
	FindPupilByID(context.Context, *FindPupilByIDRequest) (*FindPupilByIDResponse, error)
	// FindPupils returns a list of sorted pupils with the list of resources they have brought to the events that
	// passed the given filters
	FindPupils(context.Context, *FindPupilsRequest) (*FindPupilsResponse, error)
}

// UnimplementedAggregatingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAggregatingServiceServer struct {
}

func (*UnimplementedAggregatingServiceServer) FindClasses(context.Context, *FindClassesRequest) (*FindClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClasses not implemented")
}
func (*UnimplementedAggregatingServiceServer) FindEvents(context.Context, *FindEventsRequest) (*FindEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (*UnimplementedAggregatingServiceServer) FindPupilByID(context.Context, *FindPupilByIDRequest) (*FindPupilByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPupilByID not implemented")
}
func (*UnimplementedAggregatingServiceServer) FindPupils(context.Context, *FindPupilsRequest) (*FindPupilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPupils not implemented")
}

func RegisterAggregatingServiceServer(s *grpc.Server, srv AggregatingServiceServer) {
	s.RegisterService(&_AggregatingService_serviceDesc, srv)
}

func _AggregatingService_FindClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatingServiceServer).FindClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.AggregatingService/FindClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatingServiceServer).FindClasses(ctx, req.(*FindClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatingService_FindEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatingServiceServer).FindEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.AggregatingService/FindEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatingServiceServer).FindEvents(ctx, req.(*FindEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatingService_FindPupilByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPupilByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatingServiceServer).FindPupilByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.AggregatingService/FindPupilByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatingServiceServer).FindPupilByID(ctx, req.(*FindPupilByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatingService_FindPupils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPupilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatingServiceServer).FindPupils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shanvl.garbage.events.v1.AggregatingService/FindPupils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatingServiceServer).FindPupils(ctx, req.(*FindPupilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AggregatingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shanvl.garbage.events.v1.AggregatingService",
	HandlerType: (*AggregatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindClasses",
			Handler:    _AggregatingService_FindClasses_Handler,
		},
		{
			MethodName: "FindEvents",
			Handler:    _AggregatingService_FindEvents_Handler,
		},
		{
			MethodName: "FindPupilByID",
			Handler:    _AggregatingService_FindPupilByID_Handler,
		},
		{
			MethodName: "FindPupils",
			Handler:    _AggregatingService_FindPupils_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregating_service.proto",
}
